filter(!grepl("0", OTHER)) %>% # Filter outs the "0" characters.
select(OTHER)
Other_Fish
Tilapia_Over_Time <- ggplot(data = dat, aes(x = Date, y = TILAPIA)) +
geom_smooth() +
xlab("Date") +
ylab("Abundance") +
ggtitle("Tilapia Counts Over Time") +
theme_bw() +
theme(
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
plot.title = element_text(size = 15))
Tilapia_Over_Time + geom_line(alpha = 0.25)
Fish_Time_Line <- function(data, x = Date, y = "fish", title = "Fish Over Time"){
ggplot(data = dat, aes(x = Date, {{y}})) +
geom_smooth() +
theme_bw() +
labs(title = title) +
xlab("Date") +
ylab("Abundance") +
theme(
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
plot.title = element_text(size = 15))
}
Tilapia_Over_Time <- Fish_Time_Line(data = dat, x = PULL_Date, y = TILAPIA, title = "Tilapia Counts Over Time")
Tilapia_Over_Time + geom_line(alpha = 0.25)
Covina_Over_Time <- Fish_Time_Line(data = dat, x = Date, y = CORVINA, title = "Corvina Counts Over Time")
Covina_Over_Time + geom_line(alpha = 0.25)
Croaker_Over_Time <- Fish_Time_Line(data = dat, x = Date, y = CROAKER, title = "Croaker Counts Over Time")
Croaker_Over_Time + geom_line(alpha = 0.25)
ggplot(long_dat, aes(x = Date, y = Fish_Abundance, color = Species, fill = Species)) +
geom_smooth() +
theme_bw() +
ggtitle("Abundance of Fish Over Time") +
ylab("Abundance of Fish")
ggplot(long_dat, aes(x = Species, y = Fish_Abundance, fill = Species)) +
geom_boxplot() +
theme_bw() +
ggtitle("Abundance of Each Species of Fish") +
ylab("Abundance of Fish")
ggplot(Fish_Stats, aes(x = Species, y = total, fill = Species)) +
geom_col() +
geom_errorbar(aes(ymax = total + sd, # Adding error bars
ymin = total - sd),
width = 0.70) +
scale_y_break(c(200, 5000), scales = 1) + # Break in the y-axis
theme_bw() +
ggtitle("Cumulative Abundance of Each Fish Species \n2003 to 2008") +
ylab("Abundance of Fish")
ggplot(long_dat, aes(x = HABITAT_TY, y = Fish_Abundance, fill = Species)) +
geom_boxplot() +
theme_bw() +
ggtitle("Abundance of Fish at Different Habitate Types") +
ylab("Abundance of Fish") +
xlab("")
ggplot(long_dat, aes(x = HABITAT_TY, y = Fish_Abundance, fill = Species)) +
geom_boxplot() +
theme_bw() +
ggtitle("Abundance of Fish at Different Habitate Types") +
ylab("Abundance of Fish") +
xlab("Habitat Type") +
facet_wrap(. ~ Species)
ggplot(long_dat, aes(x = SITE, y = Fish_Abundance, color = Species)) +
geom_point() +
theme_bw() +
ggtitle("Abundance of Fish At Different Sites") +
ylab("Abundance of Fish") +
xlab("Site Name") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 7))
# Load in the shapfiles
shape_data <- st_read("~/Desktop/Universal Folder/Data Analysis Projects/Quarterly_Fishery_Surveys_-_Salton_Sea") |>
st_transform(3857)  # Transform for compatibility with basemap tiles
# Reading the column names of the shapefile
names(shape_data)
# Extract coordinates and bind to original data
shape_data_coords <- shape_data %>%
mutate(lon = st_coordinates(geometry)[,1],
lat = st_coordinates(geometry)[,2])
# Keep the first SITE for each unique location
unique_sites <- shape_data_coords %>%
group_by(lon, lat) %>%
slice(1) %>%  # Keep only the first row for each point, to make the names unique
ungroup() %>%
mutate(SITE = trimws(gsub("\\(bottom\\) 1", "", SITE))) # remove literal (bottom) 1 and trim any leading/trailing white space. The removal of (bottom) 1 was necessary because there were other site names that indicated the depth at which each site was surveyed and for this map those alternative names could clutter the map.
# Plot all points, label only one per unique location
ggplot() +
annotation_map_tile(zoom = 10) +
geom_sf(data = shape_data, color = "blue", size = 2) +
geom_text_repel(data = unique_sites, # To add the unique site names to each point
aes(x = lon, y = lat, label = SITE),
size = 3) +
coord_sf(crs = st_crs(shape_data)) +
theme_minimal() +
labs(title = "Salton Sea Survey Stations")
shape_data_coords <- shape_data %>%
mutate(lon = st_coordinates(geometry)[,1],
lat = st_coordinates(geometry)[,2])
tilapia_sites <- shape_data_coords %>%
group_by(lon, lat) %>%
summarise(TILAPIA = sum(TILAPIA, na.rm = TRUE),
geometry = first(geometry)) %>%
st_as_sf(crs = st_crs(shape_data))
ggplot() +
annotation_map_tile(zoom = 10) +
geom_sf(data = tilapia_sites, aes(color = TILAPIA), size = 3) +
geom_text_repel(data = unique_sites, # To add the unique site names to each point
aes(x = lon, y = lat, label = SITE),
size = 3) +
coord_sf(crs = st_crs(shape_data)) + # coord_sf() ensures that all layers use a common CRS.
scale_color_viridis_c(option = "C", name = "Tilapia Abundance") +
theme_minimal() +
labs(title = "Tilapia Abundance at Salton Sea Sampling Stations")
corvina_sites <- shape_data_coords %>%
group_by(lon, lat) %>%
summarise(CORVINA = sum(CORVINA, na.rm = TRUE),
geometry = first(geometry)) %>%
st_as_sf(crs = st_crs(shape_data))
ggplot() +
annotation_map_tile(zoom = 10) +
geom_sf(data = corvina_sites, aes(color = CORVINA), size = 3) +
geom_text_repel(data = unique_sites,
aes(x = lon, y = lat, label = SITE),
size = 3) +
coord_sf(crs = st_crs(shape_data)) +
scale_color_viridis_c(option = "C", name = "Corvina Abundance") +
theme_minimal() +
labs(title = "Corvina Abundance at Salton Sea Sampling Stations")
croaker_sites <- shape_data_coords %>%
group_by(lon, lat) %>%
summarise(CROAKER = sum(CROAKER, na.rm = TRUE),
geometry = first(geometry)) %>%
st_as_sf(crs = st_crs(shape_data))
ggplot() +
annotation_map_tile(zoom = 10) +
geom_sf(data = croaker_sites, aes(color = CROAKER), size = 3) +
geom_text_repel(data = unique_sites,
aes(x = lon, y = lat, label = SITE),
size = 3) +
coord_sf(crs = st_crs(shape_data)) +
scale_color_viridis_c(option = "C", name = "Croaker Abundance") +
theme_minimal() +
labs(title = "Croaker Abundance at Salton Sea Sampling Stations")
install.packages("bookdown")
library(bookdown)
klippy::klippy()
install.packages("klippy")
# First, install devtools if not installed
if (!require("devtools")) install.packages("devtools")
# Then install klippy from GitHub
devtools::install_github("rlesur/klippy")
# Load it
library(klippy)
klippy::klippy()
klippy(
lang = c("r", "markdown"),
all_precode = FALSE,
position = c("top", "left"),
color = "blue",
tooltip_message = "Copy code",
tooltip_success = "Copied!"
)
View(dat)
View(Fish_Stats)
setwd("~/Desktop/Universal Folder/Data Analysis Projects/Salton Sea [ds429]/Quarterly_Fishery_and_Water_Quality_Surveys_-_Salton_Sea (ds428)")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library("ggbreak") # For creating breaks in the x or y axes
library("patchwork") # For creating breaks in the x or y axes
setwd("~/Desktop/Universal Folder/Data Analysis Projects/Salton Sea [ds429]/Quarterly_Fishery_and_Water_Quality_Surveys_-_Salton_Sea (ds428)")
water_dat <- read_csv("Quarterly_Water_Quality_Surveys_-_Salton_Sea_[ds429].csv")
str(water_dat)
cols_to_convert <- c("TEMP_C", "CONDUCTIVI", "SP_CONDUCT", "SALINITY", "DISS_OXYGE")
water_dat <- water_dat %>%
mutate(across(all_of(cols_to_convert), ~ as.double(na_if(., "N/A"))))  # changing all of the columns listed in the cols_to_convert object as numeric and if any "N/A" value is present it is then converted to NA as a double.
str(water_dat)
water_dat <- water_dat %>%
mutate(Date = as.Date(ymd_hms(water_dat$DATE_)))
limited.water.data <- water_dat %>%
select(-c(DATE_, COMMENTS, UTM_E, UTM_N, SP_CONDUCT, CONDUCTIVI, X, Y, PROBE, OBJECTID, DISS_OXYGE, SITE))
limited.water.data
plot(limited.water.data)
no_na_salinity <- water_dat %>%     # Removing NAs from the water data
drop_na(SALINITY)
salinity_time <- ggplot(data = no_na_salinity, aes(x = Date, y = SALINITY, color = SITE)) +
geom_line() +
geom_hline(yintercept = 35, linetype = "dashed", color = "darkblue") +
annotate("text", x = as.Date("2005-07-01"), y = 35.5,
label = "Avg Ocean Salinity (35 ppt)",
color = "darkblue", hjust = 0, vjust = -0.2) +
theme_bw() +
ggtitle("Salinity Over Time") +
ylab("Salinity (ppt)") +
labs(color = "Sampling Sites")
salinity_time
temp_time <- ggplot(data = water_dat, aes(x = Date, y = TEMP_C, color = SITE)) +
geom_line() +
ggtitle("Temperature Over Time") +
ylab("Temperature (Â°C)") +
labs(color = "Sampling Sites") +
theme_bw()
temp_time
oxygen_time <- ggplot(data = water_dat, aes(x = Date, y = DISS_OXYGE, color = SITE)) +
geom_line() +
geom_hline(yintercept = 5, linetype = "dashed", color = "darkblue") +
geom_hline(yintercept = 8, linetype = "dashed", color = "darkblue") +
annotate("text", x = as.Date("2006-01-01"), y = 7.4,
label = "Healthy Oxygen Conc. (mg/L)",
color = "darkblue") +
ggtitle("Disolved Oxygen Over Time") +
ylab("Disolved Oxyben (mg/L)") +
theme_bw()
oxygen_time
oxygen_time <- ggplot(data = water_dat, aes(x = Date, y = DISS_OXYGE, color = SITE)) +
geom_line() +
geom_hline(yintercept = 5, linetype = "dashed", color = "darkblue") +
geom_hline(yintercept = 8, linetype = "dashed", color = "darkblue") +
annotate("text", x = as.Date("2006-01-01"), y = 7.4,
label = "Healthy Oxygen Conc. (mg/L)",
color = "darkblue",
size = 12) +
ggtitle("Disolved Oxygen Over Time") +
ylab("Disolved Oxyben (mg/L)") +
theme_bw()
oxygen_time
oxygen_time <- ggplot(data = water_dat, aes(x = Date, y = DISS_OXYGE, color = SITE)) +
geom_line() +
geom_hline(yintercept = 5, linetype = "dashed", color = "darkblue") +
geom_hline(yintercept = 8, linetype = "dashed", color = "darkblue") +
annotate("text", x = as.Date("2006-01-01"), y = 7.4,
label = "Healthy Oxygen Conc. (mg/L)",
color = "darkblue",
size = 8) +
ggtitle("Disolved Oxygen Over Time") +
ylab("Disolved Oxyben (mg/L)") +
theme_bw()
oxygen_time
oxygen_time <- ggplot(data = water_dat, aes(x = Date, y = DISS_OXYGE, color = SITE)) +
geom_line() +
geom_hline(yintercept = 5, linetype = "dashed", color = "darkblue") +
geom_hline(yintercept = 8, linetype = "dashed", color = "darkblue") +
annotate("text", x = as.Date("2006-01-01"), y = 7.4,
label = "Healthy Oxygen Conc. (mg/L)",
color = "darkblue",
size = 5) +
ggtitle("Disolved Oxygen Over Time") +
ylab("Disolved Oxyben (mg/L)") +
theme_bw()
oxygen_time
oxygen_time <- ggplot(data = water_dat, aes(x = Date, y = DISS_OXYGE, color = SITE)) +
geom_line() +
geom_hline(yintercept = 5, linetype = "dashed", color = "darkblue") +
geom_hline(yintercept = 8, linetype = "dashed", color = "darkblue") +
annotate("text", x = as.Date("2006-01-01"), y = 7.4,
label = "Healthy Oxygen Conc. Zone (mg/L)",
color = "darkblue",
size = 5) +
ggtitle("Disolved Oxygen Over Time") +
ylab("Disolved Oxyben (mg/L)") +
theme_bw()
oxygen_time
knitr::opts_chunk$set(echo = TRUE)
# Load in libraries
library("ggplot2") # For graphing
library("tidyverse") # For data wrangling
library("readr") # For reading the comma separated values file (csv.)
library("sf") # For reading the shape file (shp.)
library("ggspatial") # For graphing spatial data
library("prettymapr") # For making pretty map graphics and annotations
library("ggrepel") # For adjusting the annotations in the map
library("ggbreak") # For creating breaks in the x or y axes
library("patchwork") # For creating breaks in the x or y axes
library("gridExtra") # For plotting multiple graphs into one figure
library("grid") # For making a common x and y axis for the grouped graph
library("klippy") # For making the code easily copied from the HTML page
# Set working directory
setwd("~/Desktop/Universal Folder/Data Analysis Projects/Salton Sea [ds429]/Quarterly_Fishery_and_Water_Quality_Surveys_-_Salton_Sea (ds428)")
dat <- read_csv("Quarterly_Fishery_Surveys_-_Salton_Sea_(ds428).csv")
head(dat)
# Display the data type of each column within the data.
sapply(dat, class)
# Adding in the date column from the PULL_DATE column in a year month day hour minute second format.
dat <- dat %>%
mutate(Date = as.Date(ymd_hms(dat$PULL_DATE)))
knitr::opts_chunk$set(echo = TRUE)
klippy::klippy(
lang = c("r", "markdown"),
all_precode = FALSE,
position = c("top", "right"),
color = "lightblue",
tooltip_message = "Copy code",
tooltip_success = "Copied!"
)
# Load in libraries
library("ggplot2") # For graphing
library("tidyverse") # For data wrangling
library("readr") # For reading the comma separated values file (csv.)
library("sf") # For reading the shape file (shp.)
library("ggspatial") # For graphing spatial data
library("prettymapr") # For making pretty map graphics and annotations
library("ggrepel") # For adjusting the annotations in the map
library("ggbreak") # For creating breaks in the x or y axes
library("patchwork") # For creating breaks in the x or y axes
library("gridExtra") # For plotting multiple graphs into one figure
library("grid") # For making a common x and y axis for the grouped graph
library("klippy") # For making the code easily copied from the HTML page
# Set working directory
setwd("~/Desktop/Universal Folder/Data Analysis Projects/Salton Sea [ds429]/Quarterly_Fishery_and_Water_Quality_Surveys_-_Salton_Sea (ds428)")
dat <- read_csv("Quarterly_Fishery_Surveys_-_Salton_Sea_(ds428).csv")
head(dat)
# Display the data type of each column within the data.
sapply(dat, class)
# Adding in the date column from the PULL_DATE column in a year month day hour minute second format.
dat <- dat %>%
mutate(Date = as.Date(ymd_hms(dat$PULL_DATE)))
long_dat <- pivot_longer(dat, cols = c(TILAPIA, CORVINA, SARGO, CROAKER), values_to = "Fish_Abundance", names_to = "Species")
head(long_dat)
Fish_Stats <- long_dat %>%
group_by(Species) %>%
summarise(total = sum(Fish_Abundance),
mean = round(mean(Fish_Abundance), 3),
min = min(Fish_Abundance),
max = max(Fish_Abundance),
sd = sd(Fish_Abundance))
Fish_Stats
Other_Fish <- dat %>%
filter(!grepl("0", OTHER)) %>% # Filter outs the "0" characters.
select(OTHER)
Other_Fish
ggplot(Fish_Stats, aes(x = Species, y = total, fill = Species)) +
geom_col() +
geom_errorbar(aes(ymax = total + sd, # Adding error bars
ymin = total - sd),
width = 0.70) +
scale_y_break(c(200, 5000), scales = 1) + # Break in the y-axis
theme_bw() +
ggtitle("Cumulative Abundance of Each Fish Species \n2003 to 2008") +
ylab("Abundance of Fish")
long_dat <- long_dat %>%
filter(!grepl("SARGO", Species))
long_dat
Fish_Habitat_Stats <- long_dat %>%
group_by(Species, HABITAT_TY) %>%
summarise(total = sum(Fish_Abundance),
mean = round(mean(Fish_Abundance), 3),
min = min(Fish_Abundance),
max = max(Fish_Abundance),
sd = sd(Fish_Abundance))
Fish_Habitat_Stats
ggplot(Fish_Habitat_Stats, aes(x = HABITAT_TY, y = total, fill = Species)) +
geom_col() +
geom_errorbar(aes(ymax = total + sd,
ymin = total - sd),
width = 0.7) +
ggtitle("Abundance of Fish at Different Habitate Types") +
ylab("Abundance of Fish") +
xlab("Habitat Type") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 7)) +
facet_wrap(. ~ Species, scales = "free")
Species_based_CPUE <- long_dat %>%
group_by(Species) %>%
summarise(total_abundance = sum(Fish_Abundance),
total_hr = sum(NET_HRS),
CPUE = round(total_abundance/total_hr, 4),
sd = sd(Fish_Abundance/NET_HRS))
Species_based_CPUE
CPUE_Bar_Plot <- ggplot(data = Species_based_CPUE, aes(x = Species, y = CPUE, fill = Species)) +
geom_col() +
geom_errorbar(aes(ymax = CPUE + sd,
ymin = 0,           # The error bars were limited to y = 0 because there are no negative amounts of fish that are caught
width = 0.7)) +
theme_bw() +
ggtitle("Species based Catch-Per-Unit-Effort") +
ylab("CPUE (fish caught per hr)")
CPUE_Bar_Plot
Fish_Time_Line <- function(data, x = Date, y = "fish", title = "Fish Over Time"){
ggplot(data = dat, aes(x = Date, {{y}})) +
geom_smooth() + # This line shows the overall trend of the data with bounds of certainty
geom_line(alpha = 0.25) + # This line represents the raw data
theme_bw() +
labs(title = title) +
xlab("Date") +
ylab("Abundance") +
theme(
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10),
plot.title = element_text(size = 15))
}
Tilapia_Over_Time <- Fish_Time_Line(data = dat, x = PULL_Date, y = TILAPIA, title = "Tilapia Counts Over Time")
Tilapia_Over_Time
Corvina_Over_Time <- Fish_Time_Line(data = dat, x = Date, y = CORVINA, title = "Corvina Counts Over Time")
Corvina_Over_Time
Croaker_Over_Time <- Fish_Time_Line(data = dat, x = Date, y = CROAKER, title = "Croaker Counts Over Time")
Croaker_Over_Time
ggplot(long_dat, aes(x = Date, y = Fish_Abundance, color = Species, fill = Species)) +
geom_smooth() +
theme_bw() +
ggtitle("Abundance of Fish Over Time") +
ylab("Abundance of Fish")
# Creating common titles for the title, x and y axes.
title.common <- textGrob("Species of Fish Over Time",
gp=gpar(fontsize=20))
y.common <- textGrob("Abundance",
gp=gpar(fontsize=15), rot=90)
x.common <- textGrob("Date",
gp=gpar(fontsize=15))
# Arranging the graphs in a grid, removing the y and x axis titles of the orginal graphs, and replacing them with the common y and x axis titles.
grid.arrange(arrangeGrob(Tilapia_Over_Time + ylab("") + xlab("") + ggtitle("Tilapia"),
Corvina_Over_Time + ylab("") + xlab("") + ggtitle("Corvina"),
Croaker_Over_Time + ylab("") + xlab("") + ggtitle("Croaker"),
ncol = 3,
top = title.common,
left = y.common,
bottom = x.common))
# Load in the shapefiles
shape_data <- st_read("~/Desktop/Universal Folder/Data Analysis Projects/Salton Sea [ds429]/Quarterly_Fishery_Surveys_-_Salton_Sea") |>
st_transform(3857)  # Transform for compatibility with basemap tiles
# Load in the shapefiles
shape_data <- st_read("/Users/bodhi_hueffmeier/Desktop/Universal\ Folder/Data\ Analysis\ Projects/Salton\ Sea\ \[ds429\]/Quarterly_Fishery_and_Water_Quality_Surveys_-_Salton_Sea\ \(ds428\)/Quarterly_Fishery_Surveys_-_Salton_Sea_\[ds428\].shp") |>
# Load in the shapefiles
shape_data <- st_read("~/Users/bodhi_hueffmeier/Desktop/Universal\ Folder/Data\ Analysis\ Projects/Salton\ Sea\ \[ds429\]/Quarterly_Fishery_and_Water_Quality_Surveys_-_Salton_Sea\ \(ds428\)/Quarterly_Fishery_Surveys_-_Salton_Sea_\[ds428\].shp") |>
shape_data <- st_read("Quarterly_Fishery_Surveys_-_Salton_Sea_\[ds428\].shp") |>
shape_data <- st_read("Quarterly_Fishery_Surveys_-_Salton_Sea_[ds428].shp") |>
st_transform(3857)
# Load in the shapefiles
shape_data <- st_read("Quarterly_Fishery_Surveys_-_Salton_Sea_[ds428].shp") |>
st_transform(3857)  # Transform for compatibility with basemap tiles
# Reading the column names of the shapefile
names(shape_data)
# Extract coordinates and bind to original data
shape_data_coords <- shape_data %>%
mutate(lon = st_coordinates(geometry)[,1],
lat = st_coordinates(geometry)[,2])
# Keep the first SITE for each unique location
unique_sites <- shape_data_coords %>%
group_by(lon, lat) %>%
slice(1) %>%  # Keep only the first row for each point, to make the names unique
ungroup() %>%
mutate(SITE = trimws(gsub("\\(bottom\\) 1", "", SITE))) # Removes "(bottom) 1" and trims any leading/trailing white space. The removal of (bottom) 1 was necessary because there were other site names that indicated the depth at which each site was surveyed and for this map those addional names could clutter the map
# Plot all points, label only one per unique location
ggplot() +
annotation_map_tile(zoom = 10) +
geom_sf(data = shape_data, color = "blue", size = 2) +
geom_text_repel(data = unique_sites, # To add the unique site names to each point
aes(x = lon, y = lat, label = SITE),
size = 3) +
coord_sf(crs = st_crs(shape_data)) +
theme_minimal() +
labs(title = "Salton Sea Survey Stations")
# This code was used as an example for making the function in the code block below
shape_data_coords <- shape_data %>%
mutate(lon = st_coordinates(geometry)[,1],
lat = st_coordinates(geometry)[,2])
tilapia_sites <- shape_data_coords %>%
group_by(lon, lat) %>%
summarise(TILAPIA = sum(TILAPIA, na.rm = TRUE),
geometry = first(geometry)) %>%
st_as_sf(crs = st_crs(shape_data))
ggplot() +
annotation_map_tile(zoom = 10) +
geom_sf(data = tilapia_sites, aes(color = TILAPIA), size = 3) +
geom_text_repel(data = unique_sites, # To add the unique site names to each point
aes(x = lon, y = lat, label = SITE),
size = 3) +
coord_sf(crs = st_crs(shape_data)) + # coord_sf() ensures that all layers use a common CRS
scale_color_viridis_c(option = "C", name = "Tilapia Abundance") +
theme_minimal() +
labs(title = "Tilapia Abundance at Salton Sea Sampling Stations")
map_spcies_abundance <- function(data = shape_data_coords, fish_species = "TILAPIA", name = "fish_species Abundance", title = "Species of Fish Abundance at Salton Sea Sampling Stations"){
survey_sites <- shape_data_coords %>%
group_by(lon, lat) %>%
summarise(fish_species = sum({{fish_species}}, na.rm = TRUE),
geometry = first(geometry)) %>%
st_as_sf(crs = st_crs(shape_data))
ggplot() +
annotation_map_tile(zoom = 10) +
geom_sf(data = survey_sites, aes(color = fish_species), size = 3) +
geom_text_repel(data = unique_sites, # To add the unique site names to each point
aes(x = lon, y = lat, label = SITE),
size = 3) +
coord_sf(crs = st_crs(shape_data)) + # coord_sf() ensures that all layers use a common CRS.
scale_color_viridis_c(option = "C", name = name) +
theme_minimal() +
labs(title = title)
}
tilapia_abundance_map <- map_spcies_abundance(data = shape_data_coords, fish_species = TILAPIA, name = "Tilapia Abundance", title = "Tilapia Abundance at Salton Sea Sampling Stations")
tilapia_abundance_map
corvina_abundance_map <- map_spcies_abundance(data = shape_data_coords, fish_species = CORVINA, name = "Corvina Abundance", title = "Corvina Abundance at Salton Sea Sampling Stations")
corvina_abundance_map
croaker_abundance_map <- map_spcies_abundance(data = shape_data_coords, fish_species = CROAKER, name = "Croaker Abundance", title = "Croaker Abundance at Salton Sea Sampling Stations")
croaker_abundance_map
ggplot(long_dat, aes(x = SITE, y = Fish_Abundance, color = Species)) +
geom_point() +
theme_bw() +
ggtitle("Abundance of Fish At Different Sites") +
ylab("Abundance of Fish") +
xlab("Site Name") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8))
library(readr)
library(tidyverse)
library(dplyr)
library(ggplot2)
library("ggbreak") # For creating breaks in the x or y axes
library("patchwork") # For creating breaks in the x or y axes
setwd("~/Desktop/Universal Folder/Data Analysis Projects/Salton Sea [ds429]/Quarterly_Fishery_and_Water_Quality_Surveys_-_Salton_Sea (ds428)")
water_dat <- read_csv("Quarterly_Water_Quality_Surveys_-_Salton_Sea_[ds429].csv")
str(water_dat)
